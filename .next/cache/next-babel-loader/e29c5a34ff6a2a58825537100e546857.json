{"ast":null,"code":"var _jsxFileName = \"/mnt/c/users/aq56215/development/first-next/pages/blog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n// posts will be populated at build time by getStaticProps()\nfunction Blog(_ref) {\n  var posts = _ref.posts;\n  return __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, posts.map(function (post) {\n    return __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, post.title);\n  }));\n} // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries. See the \"Technical details\" section.\n\n\nexport var __N_SSG = true;\nexport default Blog;","map":{"version":3,"sources":["/mnt/c/users/aq56215/development/first-next/pages/blog.js"],"names":["Blog","posts","map","post","title"],"mappings":";;;;AAGA;AACA,SAASA,IAAT,OAAyB;AAAA,MAATC,KAAS,QAATA,KAAS;AACrB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI;AAAA,WACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAACC,KAAV,CADW;AAAA,GAAd,CADL,CADJ;AAOH,C,CAED;AACA;AACA;;;;AAeA,eAAeJ,IAAf","sourcesContent":["// You can use any data fetching library\nimport fetch from 'node-fetch'\n\n// posts will be populated at build time by getStaticProps()\nfunction Blog({ posts }) {\n    return (\n        <ul>\n            {posts.map(post => (\n                <li>{post.title}</li>\n            ))}\n        </ul>\n    )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries. See the \"Technical details\" section.\nexport async function getStaticProps() {\n    // Call an external API endpoint to get posts.\n    const res = await fetch('https://jsonplaceholder.typicode.com/todos/1')\n    const posts = await res.json()\n\n    // By returning { props: posts }, the Blog component\n    // will receive `posts` as a prop at build time\n    return {\n        props: {\n            posts,\n        },\n    }\n}\n\nexport default Blog"]},"metadata":{},"sourceType":"module"}